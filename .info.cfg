#!/usr/bin/env bash
###############################################################################
# .info.cfg - Source Author Information and general strings, functions,
#   and blobs. This file gives general fields:
#       [description, author, copyright, license,
#       github, portfolio, twitter, generic_usage]
#   and these specific fields:
#       [program_usage, program_instructions, sample_settings_template]
#   May also contain:
#       [version, name, and detail]
#   to overide the defaults that are set above.

# the perl way ...
# script_abspath=$(perl -e 'use Cwd "abs_path"; print abs_path(@ARGV[0])' -- "$0")
# here=$(perl -e 'use File::Basename; use Cwd "abs_path"; print dirname(abs_path(@ARGV[0]));' -- "$0")
###############################################################################
# TODO This will most likely end up being a json file eventually ...
# This information is required for script functionality ...
#       version='x.y.z'  (e.g. '0.7.2')
#       name='xxxxx'     (e.g. 'auto_ci')
#       detail='xxxxx'   (e.g. 'automatic handling of CI context')
version='0.8.3'
name='text_colors'
detail="The obligatory Python training module to add CLI ANSI color
and other escape code formatting features."
badges="[![Netlify Status](https://api.netlify.com/api/v1/badges/416b8ca3-82db-470f-9adf-a6d06264ca75/deploy-status)](https://app.netlify.com/sites/mystifying-keller-ab5658/deploys)

![Azure DevOps builds](https://img.shields.io/azure-devops/build/skeptycal0275/skeptycal/1.svg?color=blue&label=Azure%20DevOps&style=popout) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/flask.svg?color=Yellow&label=Python&style=popout)

![Twitter Follow](https://img.shields.io/twitter/follow/skeptycal.svg?label=%40skeptycal&style=social) ![GitHub followers](https://img.shields.io/github/followers/skeptycal.svg?style=social)"
description="$name : $detail (version $version)"
author='Michael Treanor  <skeptycal@gmail.com>'
copyright='2019 (c) Michael Treanor'
license='MIT <https://opensource.org/licenses/MIT>'
github='https://www.github.com/skeptycal'
portfolio='https://www.skeptycal.com'
twitter='https://www.twitter.com/skeptycal'

generic_usage="###############################################################################
# $description
#
# author    - $author
# copyright - $copyright
# license   - $license
# github    - $github
#
# Usage: $name {demo|version|help}

#   Parameters:
#       demo, -d, --demo        -- examples of features
#       version, -v, --version  -- display version information
#       help, -h, --help        -- display usage and information

###############################################################################"
# Specific utility and CI blurbs:

# #########  pre-commit #########
# pre-commit specific usage
program_usage="
$generic_usage
#
# (There seems to be a tradition, in the spirit of 'Hello World,' to write some
# code that makes use of ANSI codes to color the CLI output.
# Since I have been working with BASH scripts lately, and working with Python
# it seems like a fun thing to do!)
#
# Importing this module gives access to the following:
#   - py_shell() - Returns string containing current python shell name.
#   - FG_DICT - dictionary of ANSI foreground color codes
#   - BG_DICT - dictionary of ANSI background color codes
#   - FLAGS_DICT - dictionary of ANSI formatting codes
#   - color_encode() - Returns encoded ANSI text string from components.
#   - color_print() - Print using ANSI color codes.
#   - color_gradient() - Print using a calculated ANSI color gradient.
#   - color_cycle() - Print by cycling through an ANSI color range.
###############################################################################

"
# pre-commit specific instructions
program_instructions="$program_usage

"
# Sample template used if none is found in a new pre-commit install
# reference: https://github.com/hootsuite/pre-commit-php
sample_settings_template=$program_instructions'
# Pre-commit Sample yaml template
default_language_version:
    python: python3.7
default_stages: [commit, push]
exclude: "^$"
fail_fast: false
# @see http://pre-commit.com/
repos:
    - repo: git://github.com/pre-commit/pre-commit-hooks
      sha: master
      hooks:
          - id: check-yaml
            files: \.(yaml|yml)$
          - id: check-added-large-files
          - id: check-byte-order-marker
          - id: check-docstring-first
          - id: check-case-conflict
          - id: check-json
          - id: check-merge-conflict
          - id: check-symlinks
          #   -   id: detect-aws-credentials
          - id: detect-private-key
          - id: end-of-file-fixer
          - id: flake8
            args: [--max-line-length=79]
          - id: pretty-format-json
          - id: requirements-txt-fixer
          - id: trailing-whitespace
    # Python settings ... replace as needed
    - repo: git://github.com/pre-commit/mirrors-pylint
      sha: master
      hooks:
          - id: pylint
# PHP settings ... replace as needed
# - repo: git@github.com:hootsuite/pre-commit-php.git
#   sha: 1.1.0
#   hooks:
#   - id: php-lint-all
#   - id: php-unit
#   - id: php-cs
#     files: \.(php)$
#     args: [--standard=PSR1 -p]
#   - id: php-cbf
#     files: \.(php)$
#     args: [--standard=PSR1 -p]
# The tool will fail a build when it has made changes to the staged files.
# This allows a developer to do a git diff and examine the changes that it
# has made. Remember that you may omit this if needed with a
# SKIP=php-cs-fixer git commit.
#   - id: php-cs-fixer
#     files: \.(php)$
#     args: [--level=PSR2]
'

# Travis CI yml
travis_yml='# Travis CI scripts (python, php)
# Python script (other languages are at the end.)
language: python
python:
  - "2.7"
  - "3.5"
  - "3.6"

  # PyPy versions
  - "pypy3.5"
# Django Stuff:
# env:
#   - DJANGO_VERSION=1.10.8
#   - DJANGO_VERSION=1.11.5
# install:
#   - pip install -q Django==$DJANGO_VERSION
#   - python setup.py -q install

# command to install dependencies
install:
  # Default ...
  # - pip install -r requirements.txt
  # - pip install .

  # Specific ...
  - pip install -e .
  # Limit setuptools as some newer versions have Issues(tm). This needs doing
  # as its own step; trying to do it via requirements.txt isn''t always
  # sufficient.
  - pip install "setuptools<34"
  # Dev requirements
  # TODO: follow invoke and split it up a bit so we''re not pulling down
  # conflicting or unused-by-travis deps?
  - pip install -r dev-requirements.txt
# command to run tests
script: pytest
after_success:
  # Upload coverage data to codecov
  - codecov
notifications:
  # irc:
  #   channels: "irc.freenode.org#xxxxx"
  #   template:
  #     - "%{repository_name}@%{branch}: %{message} (%{build_url})"
  #   on_success: change
  #   on_failure: change
  email: skeptycal@gmail.com
##
# PHP script
# Required to run your project under the correct environment.
language: php
# Versions of PHP you want your project run with.
php:
 - 5.5
 - 5.6
 - 7.0
 - 7.1
 - 7.2
 - hhvm
# Commands to be run before your environment runs.
before_script:
 - composer self-update
 - composer install --prefer-source --no-interaction --dev
# Commands you want to run that will verify your build.
script: phpunit
# allow_failures: Allow this build to fail under the specified environments.
# fast_finish: If your build fails do not continue trying to build, just stop.
matrix:
 allow_failures:
   - php: 5.6
   - php: hhvm
 fast_finish: true
# Customize when the notification emails are sent.
notifications:
   on_success: never
   on_failure: always
# Project language
# language: php
# # Allows use container-based infrastructure
# sudo: false
# # Start mysql service
# services:
#  - mysql
# # Cache composer packages so "composer install" is faster
# cache:
#  directories:
#    - $HOME/.composer/cache/files
# # Matrix to test in every php version
# matrix:
#  # Fast finish allows to set the build as "finished" even if the
# "allow_failures" matrix elements are not finished yet.
#  fast_finish: true
#  include:
#    - php: 5.5
#    - php: 5.6
#    - php: 7.0
#    - php: hhvm
#  allow_failures:
#    - php: hhvm
# # Define an environment variable
# env:
#  - SYMFONY_VERSION="3.0.*" DB=mysql
# # Update composer
# before-install:
#  - composer self-update
# # Install composer dependencies,
# # Create database, schema and fixtures
# install:
#  - composer install
#  - cp app/config/parameters.yml.dist app/config/parameters.yml
#  - php bin/console doctrine:database:create --env=test
#  - php bin/console doctrine:schema:create --env=test
#  - php bin/console doctrine:fixtures:load -n --env=test
# # Run script
# script:
#  - phpunit
# after_success:
#   # Upload coverage data to codecov
#   - codecov
# # After a build, send email notification with the build results
# notifications:
#   # irc:
#   #   channels: "irc.freenode.org#xxxxx"
#   #   template:
#   #     - "%{repository_name}@%{branch}: %{message} (%{build_url})"
#   #   on_success: change
#   #   on_failure: change
#   email: skeptycal@gmail.com
'

###############################################################################
# References:
# automating pre-commit hooks for Git and GitHub
#
# instructions found on https://github.com/pre-commit/pre-commit/issues/366

# Correct solution from this post:

# Author: Tom Hensel (https://github.com/gretel)

# The value of sha should not be master or HEAD. Either one will only match
# the latest version at install time and prevent subsequent auto updates. On
# GitHub, the id of the most recent commit can be looked up easily (i.e.
# commit/master).

# Alternatively, setting sha to master and running pre-commit autoupdate
# before anything else will automatically populate the values of the sha keys
# in the configuration file. Example:
# -   repo: meta
#     - hooks:
#       - id: check-hooks-apply, check-useless-excludes, identity
# -   repo: git://github.com/pre-commit/pre-commit-hooks
#     sha: master #* <-- These lines are what is needed
#     hooks:
#     -   id: check-added-large-files
# ...
#     -   id: trailing-whitespace
# -   repo: git://github.com/pre-commit/mirrors-pylint
#     sha: master #* <-- These lines are what is needed
#     hooks:
#     -   id: pylint

# Running `pre-commit autoupdate` updates this to:

# -   repo: git://github.com/pre-commit/pre-commit-hooks
#     sha: 35548254adb636ce52b5574eb1904b8c795b673e # * <-- something similar
#     hooks:
#     -   id: check-added-large-files
# ...
#     -   id: trailing-whitespace
# -   repo: git://github.com/pre-commit/mirrors-pylint
#     sha: 4de6c8dfadef1a271a814561ce05b8bc1c446d22 # * <-- something similar
#     hooks:
#     -   id: pylint

#* #############################################################################
#* fake_colors : polyfill for basic_text_colors

fake_colors() {
    MAIN='\e[38;5;229m'
    RESET='\e[0m'
    fake="/tmp/.fake.tmp"
    touch $fake
    chmod 775 $fake
    echo "#\!/usr/bin/env bash
    ###############################################################################
    # fake_colors : polyfill for basic_text_colors
    # usage:    source \"./.fake.tmp\"

    # author    - Michael Treanor  <skeptycal@gmail.com>
    # copyright - 2019 (c) Michael Treanor
    # license   - MIT <https://opensource.org/licenses/MIT>
    # github    - https://www.github.com/skeptycal
    ############################################################################
    MAIN='\\''e[38;5;229m'
    RESET='\\''e[0m'

    ce() {
        color_code=\"\$1\" && shift || return
        echo \"\${color_code}\${@}\${RESET}\"
    }
    " >$fake

    # actual colors were: main (bold), warn (red), blue, green, orange, purple
    # all colors replaced with main (bold)
    for i in {me,we,be,ge,oe,pe}; do
      echo "${i}() {\n ce '\\e[38;5;229m' \${@}\n}\n" >>$fake
    done;
    unset i
    source $fake
    # get rid of temp file after use ...
    rm -rf $fake
    echo "${MAIN}Ugly Warning${RESET}:"
    echo "\t<basic_text_colors> module not found ..."
    echo "\tusing ${MAIN}generic BOLD color${RESET} instead."
}
function finish {
  rm -rf "$fake"
}
trap finish EXIT
